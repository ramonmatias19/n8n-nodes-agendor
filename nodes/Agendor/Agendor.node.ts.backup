import { INodeType, INodeTypeDescription, NodeConnectionType } from 'n8n-workflow';

export class Agendor implements INodeType {
	description: INodeTypeDescription = {
		displayName: 'Agendor',
		name: 'agendor',
		icon: 'file:logo.svg',
		group: ['transform'],
		version: 1,
		subtitle: '={{$parameter["operation"] + ": " + $parameter["resource"]}}',
		description: 'Trabalhe com dados da API do Agendor CRM',
		defaults: {
			name: 'Agendor',
		},
		inputs: [NodeConnectionType.Main],
		outputs: [NodeConnectionType.Main],
		credentials: [
			{
				name: 'AgendorApi',
				required: true,
			},
		],
		requestDefaults: {
			baseURL: 'https://api.agendor.com.br/v3',
			headers: {
				Accept: 'application/json',
				'Content-Type': 'application/json',
			},
		},
		properties: [
			// Resource selector
			{
				displayName: 'Resource',
				name: 'resource',
				type: 'options',
				noDataExpression: true,
				options: [
					{
						name: 'User',
						value: 'users',
						description: 'Gerenciar usu√°rios',
					},
					{
						name: 'Organization',
						value: 'organizations',
						description: 'Gerenciar organiza√ß√µes/empresas',
					},
					{
						name: 'Person',
						value: 'people',
						description: 'Gerenciar pessoas/contatos',
					},
					{
						name: 'Deal',
						value: 'deals',
						description: 'Gerenciar neg√≥cios/oportunidades',
					},
				],
				default: 'people',
			},

			// ===========================================
			// USERS OPERATIONS
			// ===========================================
			{
				displayName: 'Operation',
				name: 'operation',
				type: 'options',
				noDataExpression: true,
				displayOptions: {
					show: {
						resource: ['users'],
					},
				},
				options: [
					{
						name: 'Get Many',
						value: 'getMany',
						action: 'Listar usu·rios',
						description: 'Recuperar m√∫ltiplos usu√°rios',
						routing: {
							request: {
								method: 'GET',
								url: '/users',
							},
						},
					},
					{
						name: 'Get',
						value: 'get',
						action: 'Obter usu·rio',
						description: 'Obter um usu√°rio espec√≠fico por ID',
						routing: {
							request: {
								method: 'GET',
								url: '=/users/{{$parameter["userId"]}}',
							},
						},
					},
					{
						name: 'Update',
						value: 'update',
						action: 'Atualizar usu·rio',
						description: 'Atualizar informa√ß√µes do usu√°rio',
						routing: {
							request: {
								method: 'PUT',
								url: '=/users/{{$parameter["userId"]}}',
							},
						},
					},
				],
				default: 'getMany',
			},

			// User ID field for get/update operations
			{
				displayName: 'User ID',
				name: 'userId',
				type: 'string',
				required: true,
				displayOptions: {
					show: {
						resource: ['users'],
						operation: ['get', 'update'],
					},
				},
				default: '',
				description: 'O ID do usu√°rio (formato num√©rico)',
				placeholder: '12345',
			},

			// ===========================================
			// ORGANIZATIONS OPERATIONS
			// ===========================================
			{
				displayName: 'Operation',
				name: 'operation',
				type: 'options',
				noDataExpression: true,
				displayOptions: {
					show: {
						resource: ['organizations'],
					},
				},
				options: [
					{
						name: 'Get Many',
						value: 'getMany',
						action: 'Listar organizaÁıes',
						description: 'Recuperar m√∫ltiplas organiza√ß√µes',
						routing: {
							request: {
								method: 'GET',
								url: '/organizations',
							},
						},
					},
					{
						name: 'Get',
						value: 'get',
						action: 'Obter organizaÁ„o',
						description: 'Obter uma organiza√ß√£o espec√≠fica por ID',
						routing: {
							request: {
								method: 'GET',
								url: '=/organizations/{{$parameter["organizationId"]}}',
							},
						},
					},
					{
						name: 'Create',
						value: 'create',
						action: 'Criar organizaÁ„o',
						description: 'Criar uma nova organiza√ß√£o',
						routing: {
							request: {
								method: 'POST',
								url: '/organizations',
							},
						},
					},
					{
						name: 'Update',
						value: 'update',
						action: 'Atualizar organizaÁ„o',
						description: 'Atualizar informa√ß√µes da organiza√ß√£o',
						routing: {
							request: {
								method: 'PUT',
								url: '=/organizations/{{$parameter["organizationId"]}}',
							},
						},
					},
					{
						name: 'Delete',
						value: 'delete',
						action: 'Deletar organizaÁ„o',
						description: 'Deletar uma organiza√ß√£o',
						routing: {
							request: {
								method: 'DELETE',
								url: '=/organizations/{{$parameter["organizationId"]}}',
							},
						},
					},
				],
				default: 'getMany',
			},

			// Organization ID field
			{
				displayName: 'Organization ID',
				name: 'organizationId',
				type: 'string',
				required: true,
				displayOptions: {
					show: {
						resource: ['organizations'],
						operation: ['get', 'update', 'delete'],
					},
				},
				default: '',
				description: 'O ID da organiza√ß√£o (formato num√©rico)',
				placeholder: '12345',
			},

			// Organization fields for create/update
			{
				displayName: 'Name',
				name: 'name',
				type: 'string',
				required: true,
				displayOptions: {
					show: {
						resource: ['organizations'],
						operation: ['create', 'update'],
					},
				},
				default: '',
				description: 'Nome da organiza√ß√£o',
				placeholder: 'Empresa ABC Ltda',
				routing: {
					send: {
						type: 'body',
						property: 'name',
					},
				},
			},

			// ===========================================
			// PEOPLE OPERATIONS
			// ===========================================
			{
				displayName: 'Operation',
				name: 'operation',
				type: 'options',
				noDataExpression: true,
				displayOptions: {
					show: {
						resource: ['people'],
					},
				},
				options: [
					{
						name: 'Get Many',
						value: 'getMany',
						action: 'Listar pessoas',
						description: 'Recuperar m√∫ltiplas pessoas',
						routing: {
							request: {
								method: 'GET',
								url: '/people',
							},
						},
					},
					{
						name: 'Get',
						value: 'get',
						action: 'Obter pessoa',
						description: 'Obter uma pessoa espec√≠fica por ID',
						routing: {
							request: {
								method: 'GET',
								url: '=/people/{{$parameter["personId"]}}',
							},
						},
					},
					{
						name: 'Create',
						value: 'create',
						action: 'Criar pessoa',
						description: 'Criar uma nova pessoa',
						routing: {
							request: {
								method: 'POST',
								url: '/people',
							},
						},
					},
					{
						name: 'Update',
						value: 'update',
						action: 'Atualizar pessoa',
						description: 'Atualizar informa√ß√µes da pessoa',
						routing: {
							request: {
								method: 'PUT',
								url: '=/people/{{$parameter["personId"]}}',
							},
						},
					},
					{
						name: 'Delete',
						value: 'delete',
						action: 'Deletar pessoa',
						description: 'Deletar uma pessoa',
						routing: {
							request: {
								method: 'DELETE',
								url: '=/people/{{$parameter["personId"]}}',
							},
						},
					},
				],
				default: 'getMany',
			},

			// Person ID field
			{
				displayName: 'Person ID',
				name: 'personId',
				type: 'string',
				required: true,
				displayOptions: {
					show: {
						resource: ['people'],
						operation: ['get', 'update', 'delete'],
					},
				},
				default: '',
				description: 'O ID da pessoa (formato num√©rico)',
				placeholder: '12345',
			},

			// Person fields for create/update
			{
				displayName: 'Name',
				name: 'name',
				type: 'string',
				required: true,
				displayOptions: {
					show: {
						resource: ['people'],
						operation: ['create', 'update'],
					},
				},
				default: '',
				description: 'Nome da pessoa',
				placeholder: 'Jo√£o Silva',
				routing: {
					send: {
						type: 'body',
						property: 'name',
					},
				},
			},

			{
				displayName: 'Email',
				name: 'email',
				type: 'string',
				typeOptions: {
					validation: [
						{
							type: 'regex',
							properties: {
								regex: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$',
								errorMessage: 'Por favor insira um email v√°lido',
							},
						},
					],
				},
				displayOptions: {
					show: {
						resource: ['people'],
						operation: ['create', 'update'],
					},
				},
				default: '',
				description: 'Endere√ßo de email da pessoa',
				placeholder: 'joao@empresa.com',
				routing: {
					send: {
						type: 'body',
						property: 'email',
					},
				},
			},

			// ===========================================
			// DEALS OPERATIONS
			// ===========================================
			{
				displayName: 'Operation',
				name: 'operation',
				type: 'options',
				noDataExpression: true,
				displayOptions: {
					show: {
						resource: ['deals'],
					},
				},
				options: [
					{
						name: 'Get Many',
						value: 'getMany',
						action: 'Listar negÛcios',
						description: 'Recuperar m√∫ltiplos neg√≥cios',
						routing: {
							request: {
								method: 'GET',
								url: '/deals',
							},
						},
					},
					{
						name: 'Get',
						value: 'get',
						action: 'Obter negÛcio',
						description: 'Obter um neg√≥cio espec√≠fico por ID',
						routing: {
							request: {
								method: 'GET',
								url: '=/deals/{{$parameter["dealId"]}}',
							},
						},
					},
					{
						name: 'Create',
						value: 'create',
						action: 'Criar negÛcio',
						description: 'Criar um novo neg√≥cio',
						routing: {
							request: {
								method: 'POST',
								url: '/deals',
							},
						},
					},
					{
						name: 'Update',
						value: 'update',
						action: 'Atualizar negÛcio',
						description: 'Atualizar informa√ß√µes do neg√≥cio',
						routing: {
							request: {
								method: 'PUT',
								url: '=/deals/{{$parameter["dealId"]}}',
							},
						},
					},
					{
						name: 'Delete',
						value: 'delete',
						action: 'Deletar negÛcio',
						description: 'Deletar um neg√≥cio',
						routing: {
							request: {
								method: 'DELETE',
								url: '=/deals/{{$parameter["dealId"]}}',
							},
						},
					},
				],
				default: 'getMany',
			},

			// Deal ID field
			{
				displayName: 'Deal ID',
				name: 'dealId',
				type: 'string',
				required: true,
				displayOptions: {
					show: {
						resource: ['deals'],
						operation: ['get', 'update', 'delete'],
					},
				},
				default: '',
				description: 'O ID do neg√≥cio (formato num√©rico)',
				placeholder: '12345',
			},

			// Deal fields for create/update
			{
				displayName: 'Title',
				name: 'title',
				type: 'string',
				required: true,
				displayOptions: {
					show: {
						resource: ['deals'],
						operation: ['create', 'update'],
					},
				},
				default: '',
				description: 'T√≠tulo do neg√≥cio',
				placeholder: 'Venda de Software - Empresa ABC',
				routing: {
					send: {
						type: 'body',
						property: 'title',
					},
				},
			},

			{
				displayName: 'Value',
				name: 'value',
				type: 'number',
				typeOptions: {
					minValue: 0,
					numberStepSize: 0.01,
				},
				displayOptions: {
					show: {
						resource: ['deals'],
						operation: ['create', 'update'],
					},
				},
				default: 0,
				description: 'Valor do neg√≥cio em centavos (ex: 1000 = R$ 10,00)',
				placeholder: '50000',
				routing: {
					send: {
						type: 'body',
						property: 'value',
					},
				},
			},

			// ===========================================
			// ADDITIONAL OPTIONS
			// ===========================================
			{
				displayName: 'Additional Fields',
				name: 'additionalFields',
				type: 'collection',
				placeholder: 'Adicionar Campo',
				default: {},
				displayOptions: {
					show: {
						operation: ['create', 'update'],
					},
				},
				options: [
					{
						displayName: 'Description',
						name: 'description',
						type: 'string',
						typeOptions: {
							rows: 3,
						},
						default: '',
						description: 'Descri√ß√£o do item',
						placeholder: 'Detalhes adicionais sobre...',
						routing: {
							send: {
								type: 'body',
								property: 'description',
							},
						},
					},
					{
						displayName: 'Phone',
						name: 'phone',
						type: 'string',
						default: '',
						description: 'N√∫mero de telefone',
						placeholder: '(11) 99999-9999',
						displayOptions: {
							show: {
								'/resource': ['people', 'organizations'],
							},
						},
						routing: {
							send: {
								type: 'body',
								property: 'phone',
							},
						},
					},
					{
						displayName: 'Website',
						name: 'website',
						type: 'string',
						default: '',
						description: 'URL do website',
						placeholder: 'https://www.exemplo.com.br',
						displayOptions: {
							show: {
								'/resource': ['organizations'],
							},
						},
						routing: {
							send: {
								type: 'body',
								property: 'website',
							},
						},
					},
					{
						displayName: 'Address',
						name: 'address',
						type: 'string',
						default: '',
						description: 'Endere√ßo completo',
						placeholder: 'Rua das Flores, 123 - S√£o Paulo/SP',
						displayOptions: {
							show: {
								'/resource': ['people', 'organizations'],
							},
						},
						routing: {
							send: {
								type: 'body',
								property: 'address',
							},
						},
					},
					{
						displayName: 'CNPJ',
						name: 'cnpj',
						type: 'string',
						default: '',
						description: 'CNPJ da organiza√ß√£o (apenas n√∫meros)',
						placeholder: '12345678000199',
						displayOptions: {
							show: {
								'/resource': ['organizations'],
							},
						},
						routing: {
							send: {
								type: 'body',
								property: 'cnpj',
							},
						},
					},
					{
						displayName: 'CPF',
						name: 'cpf',
						type: 'string',
						default: '',
						description: 'CPF da pessoa (apenas n√∫meros)',
						placeholder: '12345678900',
						displayOptions: {
							show: {
								'/resource': ['people'],
							},
						},
						routing: {
							send: {
								type: 'body',
								property: 'cpf',
							},
						},
					},
					{
						displayName: 'Organization ID',
						name: 'organizationId',
						type: 'string',
						default: '',
						description: 'ID da organiza√ß√£o √† qual esta pessoa pertence',
						placeholder: '12345',
						displayOptions: {
							show: {
								'/resource': ['people'],
							},
						},
						routing: {
							send: {
								type: 'body',
								property: 'organizationId',
							},
						},
					},
					{
						displayName: 'Person ID',
						name: 'personId',
						type: 'string',
						default: '',
						description: 'ID da pessoa respons√°vel por este neg√≥cio',
						placeholder: '12345',
						displayOptions: {
							show: {
								'/resource': ['deals'],
							},
						},
						routing: {
							send: {
								type: 'body',
								property: 'personId',
							},
						},
					},
					{
						displayName: 'Organization ID',
						name: 'organizationId',
						type: 'string',
						default: '',
						description: 'ID da organiza√ß√£o relacionada a este neg√≥cio',
						placeholder: '12345',
						displayOptions: {
							show: {
								'/resource': ['deals'],
							},
						},
						routing: {
							send: {
								type: 'body',
								property: 'organizationId',
							},
						},
					},
				],
			},

			// Query parameters for list operations
			{
				displayName: 'Options',
				name: 'options',
				type: 'collection',
				placeholder: 'Adicionar Op√ß√£o',
				default: {},
				displayOptions: {
					show: {
						operation: ['getMany'],
					},
				},
				options: [
					{
						displayName: 'Page',
						name: 'page',
						type: 'number',
						typeOptions: {
							minValue: 1,
						},
						default: 1,
						description: 'N√∫mero da p√°gina a recuperar',
						routing: {
							send: {
								type: 'query',
								property: 'page',
							},
						},
					},
					{
						displayName: 'Per Page',
						name: 'perPage',
						type: 'number',
						typeOptions: {
							minValue: 1,
							maxValue: 100,
						},
						default: 20,
						description: 'N√∫mero de itens por p√°gina (m√°ximo 100)',
						routing: {
							send: {
								type: 'query',
								property: 'per_page',
							},
						},
					},
					{
						displayName: 'Search',
						name: 'search',
						type: 'string',
						default: '',
						description: 'Termo de busca para filtrar os resultados',
						placeholder: 'Jo√£o Silva',
						routing: {
							send: {
								type: 'query',
								property: 'search',
							},
						},
					},
					{
						displayName: 'Order By',
						name: 'orderBy',
						type: 'options',
						options: [
							{
								name: 'ID',
								value: 'id',
							},
							{
								name: 'Nome',
								value: 'name',
							},
							{
								name: 'Criado Em',
								value: 'created_at',
							},
							{
								name: 'Atualizado Em',
								value: 'updated_at',
							},
						],
						default: 'id',
						description: 'Campo para ordena√ß√£o dos resultados',
						routing: {
							send: {
								type: 'query',
								property: 'order_by',
							},
						},
					},
					{
						displayName: 'Order Direction',
						name: 'orderDirection',
						type: 'options',
						options: [
							{
								name: 'Crescente',
								value: 'asc',
							},
							{
								name: 'Decrescente',
								value: 'desc',
							},
						],
						default: 'asc',
						description: 'Dire√ß√£o da ordena√ß√£o',
						routing: {
							send: {
								type: 'query',
								property: 'order_direction',
							},
						},
					},
				],
			},
		],
	};
}
